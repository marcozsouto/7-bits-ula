// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/17/2019 15:09:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Coversor_Seven_Segments
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Coversor_Seven_Segments_vlg_sample_tst(
	A,
	sampler_tx
);
input [6:0] A;
output sampler_tx;

reg sample;
time current_time;
always @(A)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Coversor_Seven_Segments_vlg_check_tst (
	l1-e,
	l1-f,
	l1-g,
	l1_a,
	l1_c,
	l1_d,
	l1b,
	sampler_rx
);
input  l1-e;
input  l1-f;
input  l1-g;
input  l1_a;
input  l1_c;
input  l1_d;
input  l1b;
input sampler_rx;

reg  l1-e_expected;
reg  l1-f_expected;
reg  l1-g_expected;
reg  l1_a_expected;
reg  l1_c_expected;
reg  l1_d_expected;
reg  l1b_expected;

reg  l1-e_prev;
reg  l1-f_prev;
reg  l1-g_prev;
reg  l1_a_prev;
reg  l1_c_prev;
reg  l1_d_prev;
reg  l1b_prev;

reg  l1-e_expected_prev;
reg  l1-f_expected_prev;
reg  l1-g_expected_prev;
reg  l1_a_expected_prev;
reg  l1_c_expected_prev;
reg  l1_d_expected_prev;
reg  l1b_expected_prev;

reg  last_l1-e_exp;
reg  last_l1-f_exp;
reg  last_l1-g_exp;
reg  last_l1_a_exp;
reg  last_l1_c_exp;
reg  last_l1_d_exp;
reg  last_l1b_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	l1-e_prev = l1-e;
	l1-f_prev = l1-f;
	l1-g_prev = l1-g;
	l1_a_prev = l1_a;
	l1_c_prev = l1_c;
	l1_d_prev = l1_d;
	l1b_prev = l1b;
end

// update expected /o prevs

always @(trigger)
begin
	l1-e_expected_prev = l1-e_expected;
	l1-f_expected_prev = l1-f_expected;
	l1-g_expected_prev = l1-g_expected;
	l1_a_expected_prev = l1_a_expected;
	l1_c_expected_prev = l1_c_expected;
	l1_d_expected_prev = l1_d_expected;
	l1b_expected_prev = l1b_expected;
end



// expected l1_a
initial
begin
	l1_a_expected = 1'bX;
end 

// expected l1b
initial
begin
	l1b_expected = 1'bX;
end 

// expected l1_c
initial
begin
	l1_c_expected = 1'bX;
end 

// expected l1_d
initial
begin
	l1_d_expected = 1'bX;
end 

// expected l1-e
initial
begin
	l1-e_expected = 1'bX;
end 

// expected l1-f
initial
begin
	l1-f_expected = 1'bX;
end 

// expected l1-g
initial
begin
	l1-g_expected = 1'bX;
end 
// generate trigger
always @(l1-e_expected or l1-e or l1-f_expected or l1-f or l1-g_expected or l1-g or l1_a_expected or l1_a or l1_c_expected or l1_c or l1_d_expected or l1_d or l1b_expected or l1b)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected l1-e = %b | expected l1-f = %b | expected l1-g = %b | expected l1_a = %b | expected l1_c = %b | expected l1_d = %b | expected l1b = %b | ",l1-e_expected_prev,l1-f_expected_prev,l1-g_expected_prev,l1_a_expected_prev,l1_c_expected_prev,l1_d_expected_prev,l1b_expected_prev);
	$display("| real l1-e = %b | real l1-f = %b | real l1-g = %b | real l1_a = %b | real l1_c = %b | real l1_d = %b | real l1b = %b | ",l1-e_prev,l1-f_prev,l1-g_prev,l1_a_prev,l1_c_prev,l1_d_prev,l1b_prev);
`endif
	if (
		( l1-e_expected_prev !== 1'bx ) && ( l1-e_prev !== l1-e_expected_prev )
		&& ((l1-e_expected_prev !== last_l1-e_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port l1-e :: @time = %t",  $realtime);
		$display ("     Expected value = %b", l1-e_expected_prev);
		$display ("     Real value = %b", l1-e_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_l1-e_exp = l1-e_expected_prev;
	end
	if (
		( l1-f_expected_prev !== 1'bx ) && ( l1-f_prev !== l1-f_expected_prev )
		&& ((l1-f_expected_prev !== last_l1-f_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port l1-f :: @time = %t",  $realtime);
		$display ("     Expected value = %b", l1-f_expected_prev);
		$display ("     Real value = %b", l1-f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_l1-f_exp = l1-f_expected_prev;
	end
	if (
		( l1-g_expected_prev !== 1'bx ) && ( l1-g_prev !== l1-g_expected_prev )
		&& ((l1-g_expected_prev !== last_l1-g_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port l1-g :: @time = %t",  $realtime);
		$display ("     Expected value = %b", l1-g_expected_prev);
		$display ("     Real value = %b", l1-g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_l1-g_exp = l1-g_expected_prev;
	end
	if (
		( l1_a_expected_prev !== 1'bx ) && ( l1_a_prev !== l1_a_expected_prev )
		&& ((l1_a_expected_prev !== last_l1_a_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port l1_a :: @time = %t",  $realtime);
		$display ("     Expected value = %b", l1_a_expected_prev);
		$display ("     Real value = %b", l1_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_l1_a_exp = l1_a_expected_prev;
	end
	if (
		( l1_c_expected_prev !== 1'bx ) && ( l1_c_prev !== l1_c_expected_prev )
		&& ((l1_c_expected_prev !== last_l1_c_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port l1_c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", l1_c_expected_prev);
		$display ("     Real value = %b", l1_c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_l1_c_exp = l1_c_expected_prev;
	end
	if (
		( l1_d_expected_prev !== 1'bx ) && ( l1_d_prev !== l1_d_expected_prev )
		&& ((l1_d_expected_prev !== last_l1_d_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port l1_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", l1_d_expected_prev);
		$display ("     Real value = %b", l1_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_l1_d_exp = l1_d_expected_prev;
	end
	if (
		( l1b_expected_prev !== 1'bx ) && ( l1b_prev !== l1b_expected_prev )
		&& ((l1b_expected_prev !== last_l1b_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port l1b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", l1b_expected_prev);
		$display ("     Real value = %b", l1b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_l1b_exp = l1b_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Coversor_Seven_Segments_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [6:0] A;
// wires                                               
wire l1-e;
wire l1-f;
wire l1-g;
wire l1_a;
wire l1_c;
wire l1_d;
wire l1b;

wire sampler;                             

// assign statements (if any)                          
Coversor_Seven_Segments i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.\l1-e (l1-e),
	.\l1-f (l1-f),
	.\l1-g (l1-g),
	.l1_a(l1_a),
	.l1_c(l1_c),
	.l1_d(l1_d),
	.l1b(l1b)
);
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
	A[2] = #10000 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
	A[0] = #10000 1'b0;
end 

Coversor_Seven_Segments_vlg_sample_tst tb_sample (
	.A(A),
	.sampler_tx(sampler)
);

Coversor_Seven_Segments_vlg_check_tst tb_out(
	.l1-e(l1-e),
	.l1-f(l1-f),
	.l1-g(l1-g),
	.l1_a(l1_a),
	.l1_c(l1_c),
	.l1_d(l1_d),
	.l1b(l1b),
	.sampler_rx(sampler)
);
endmodule

