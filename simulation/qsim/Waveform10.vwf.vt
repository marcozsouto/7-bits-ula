// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/17/2019 15:13:46"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Coversor_Seven_Segments
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Coversor_Seven_Segments_vlg_sample_tst(
	A,
	sampler_tx
);
input [6:0] A;
output sampler_tx;

reg sample;
time current_time;
always @(A)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Coversor_Seven_Segments_vlg_check_tst (
	la,
	lb,
	lc,
	ld,
	le,
	lf,
	lg,
	sampler_rx
);
input  la;
input  lb;
input  lc;
input  ld;
input  le;
input  lf;
input  lg;
input sampler_rx;

reg  la_expected;
reg  lb_expected;
reg  lc_expected;
reg  ld_expected;
reg  le_expected;
reg  lf_expected;
reg  lg_expected;

reg  la_prev;
reg  lb_prev;
reg  lc_prev;
reg  ld_prev;
reg  le_prev;
reg  lf_prev;
reg  lg_prev;

reg  la_expected_prev;
reg  lb_expected_prev;
reg  lc_expected_prev;
reg  ld_expected_prev;
reg  le_expected_prev;
reg  lf_expected_prev;
reg  lg_expected_prev;

reg  last_la_exp;
reg  last_lb_exp;
reg  last_lc_exp;
reg  last_ld_exp;
reg  last_le_exp;
reg  last_lf_exp;
reg  last_lg_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	la_prev = la;
	lb_prev = lb;
	lc_prev = lc;
	ld_prev = ld;
	le_prev = le;
	lf_prev = lf;
	lg_prev = lg;
end

// update expected /o prevs

always @(trigger)
begin
	la_expected_prev = la_expected;
	lb_expected_prev = lb_expected;
	lc_expected_prev = lc_expected;
	ld_expected_prev = ld_expected;
	le_expected_prev = le_expected;
	lf_expected_prev = lf_expected;
	lg_expected_prev = lg_expected;
end



// expected la
initial
begin
	la_expected = 1'bX;
end 

// expected lb
initial
begin
	lb_expected = 1'bX;
end 

// expected lc
initial
begin
	lc_expected = 1'bX;
end 

// expected ld
initial
begin
	ld_expected = 1'bX;
end 

// expected le
initial
begin
	le_expected = 1'bX;
end 

// expected lf
initial
begin
	lf_expected = 1'bX;
end 

// expected lg
initial
begin
	lg_expected = 1'bX;
end 
// generate trigger
always @(la_expected or la or lb_expected or lb or lc_expected or lc or ld_expected or ld or le_expected or le or lf_expected or lf or lg_expected or lg)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected la = %b | expected lb = %b | expected lc = %b | expected ld = %b | expected le = %b | expected lf = %b | expected lg = %b | ",la_expected_prev,lb_expected_prev,lc_expected_prev,ld_expected_prev,le_expected_prev,lf_expected_prev,lg_expected_prev);
	$display("| real la = %b | real lb = %b | real lc = %b | real ld = %b | real le = %b | real lf = %b | real lg = %b | ",la_prev,lb_prev,lc_prev,ld_prev,le_prev,lf_prev,lg_prev);
`endif
	if (
		( la_expected_prev !== 1'bx ) && ( la_prev !== la_expected_prev )
		&& ((la_expected_prev !== last_la_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port la :: @time = %t",  $realtime);
		$display ("     Expected value = %b", la_expected_prev);
		$display ("     Real value = %b", la_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_la_exp = la_expected_prev;
	end
	if (
		( lb_expected_prev !== 1'bx ) && ( lb_prev !== lb_expected_prev )
		&& ((lb_expected_prev !== last_lb_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lb :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lb_expected_prev);
		$display ("     Real value = %b", lb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lb_exp = lb_expected_prev;
	end
	if (
		( lc_expected_prev !== 1'bx ) && ( lc_prev !== lc_expected_prev )
		&& ((lc_expected_prev !== last_lc_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lc_expected_prev);
		$display ("     Real value = %b", lc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_lc_exp = lc_expected_prev;
	end
	if (
		( ld_expected_prev !== 1'bx ) && ( ld_prev !== ld_expected_prev )
		&& ((ld_expected_prev !== last_ld_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_expected_prev);
		$display ("     Real value = %b", ld_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ld_exp = ld_expected_prev;
	end
	if (
		( le_expected_prev !== 1'bx ) && ( le_prev !== le_expected_prev )
		&& ((le_expected_prev !== last_le_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port le :: @time = %t",  $realtime);
		$display ("     Expected value = %b", le_expected_prev);
		$display ("     Real value = %b", le_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_le_exp = le_expected_prev;
	end
	if (
		( lf_expected_prev !== 1'bx ) && ( lf_prev !== lf_expected_prev )
		&& ((lf_expected_prev !== last_lf_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lf :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lf_expected_prev);
		$display ("     Real value = %b", lf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_lf_exp = lf_expected_prev;
	end
	if (
		( lg_expected_prev !== 1'bx ) && ( lg_prev !== lg_expected_prev )
		&& ((lg_expected_prev !== last_lg_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lg_expected_prev);
		$display ("     Real value = %b", lg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_lg_exp = lg_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Coversor_Seven_Segments_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [6:0] A;
// wires                                               
wire la;
wire lb;
wire lc;
wire ld;
wire le;
wire lf;
wire lg;

wire sampler;                             

// assign statements (if any)                          
Coversor_Seven_Segments i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.la(la),
	.lb(lb),
	.lc(lc),
	.ld(ld),
	.le(le),
	.lf(lf),
	.lg(lg)
);
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
	A[2] = #10000 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
	A[0] = #10000 1'b0;
end 

Coversor_Seven_Segments_vlg_sample_tst tb_sample (
	.A(A),
	.sampler_tx(sampler)
);

Coversor_Seven_Segments_vlg_check_tst tb_out(
	.la(la),
	.lb(lb),
	.lc(lc),
	.ld(ld),
	.le(le),
	.lf(lf),
	.lg(lg),
	.sampler_rx(sampler)
);
endmodule

