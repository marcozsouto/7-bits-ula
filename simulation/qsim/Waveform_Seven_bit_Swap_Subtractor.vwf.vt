// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/04/2019 06:12:58"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Seven_bit_Swap_Subtractor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Seven_bit_Swap_Subtractor_vlg_sample_tst(
	A,
	B,
	sampler_tx
);
input [6:0] A;
input [6:0] B;
output sampler_tx;

reg sample;
time current_time;
always @(A or B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Seven_bit_Swap_Subtractor_vlg_check_tst (
	overflow,
	Sub,
	sampler_rx
);
input  overflow;
input [6:0] Sub;
input sampler_rx;

reg  overflow_expected;
reg [6:0] Sub_expected;

reg  overflow_prev;
reg [6:0] Sub_prev;

reg  overflow_expected_prev;
reg [6:0] Sub_expected_prev;

reg  last_overflow_exp;
reg [6:0] last_Sub_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	overflow_prev = overflow;
	Sub_prev = Sub;
end

// update expected /o prevs

always @(trigger)
begin
	overflow_expected_prev = overflow_expected;
	Sub_expected_prev = Sub_expected;
end



// expected overflow
initial
begin
	overflow_expected = 1'bX;
end 
// expected Sub[ 6 ]
initial
begin
	Sub_expected[6] = 1'bX;
end 
// expected Sub[ 5 ]
initial
begin
	Sub_expected[5] = 1'bX;
end 
// expected Sub[ 4 ]
initial
begin
	Sub_expected[4] = 1'bX;
end 
// expected Sub[ 3 ]
initial
begin
	Sub_expected[3] = 1'bX;
end 
// expected Sub[ 2 ]
initial
begin
	Sub_expected[2] = 1'bX;
end 
// expected Sub[ 1 ]
initial
begin
	Sub_expected[1] = 1'bX;
end 
// expected Sub[ 0 ]
initial
begin
	Sub_expected[0] = 1'bX;
end 
// generate trigger
always @(overflow_expected or overflow or Sub_expected or Sub)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected overflow = %b | expected Sub = %b | ",overflow_expected_prev,Sub_expected_prev);
	$display("| real overflow = %b | real Sub = %b | ",overflow_prev,Sub_prev);
`endif
	if (
		( overflow_expected_prev !== 1'bx ) && ( overflow_prev !== overflow_expected_prev )
		&& ((overflow_expected_prev !== last_overflow_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", overflow_expected_prev);
		$display ("     Real value = %b", overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_overflow_exp = overflow_expected_prev;
	end
	if (
		( Sub_expected_prev[0] !== 1'bx ) && ( Sub_prev[0] !== Sub_expected_prev[0] )
		&& ((Sub_expected_prev[0] !== last_Sub_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sub[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sub_expected_prev);
		$display ("     Real value = %b", Sub_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Sub_exp[0] = Sub_expected_prev[0];
	end
	if (
		( Sub_expected_prev[1] !== 1'bx ) && ( Sub_prev[1] !== Sub_expected_prev[1] )
		&& ((Sub_expected_prev[1] !== last_Sub_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sub[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sub_expected_prev);
		$display ("     Real value = %b", Sub_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Sub_exp[1] = Sub_expected_prev[1];
	end
	if (
		( Sub_expected_prev[2] !== 1'bx ) && ( Sub_prev[2] !== Sub_expected_prev[2] )
		&& ((Sub_expected_prev[2] !== last_Sub_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sub[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sub_expected_prev);
		$display ("     Real value = %b", Sub_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Sub_exp[2] = Sub_expected_prev[2];
	end
	if (
		( Sub_expected_prev[3] !== 1'bx ) && ( Sub_prev[3] !== Sub_expected_prev[3] )
		&& ((Sub_expected_prev[3] !== last_Sub_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sub[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sub_expected_prev);
		$display ("     Real value = %b", Sub_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Sub_exp[3] = Sub_expected_prev[3];
	end
	if (
		( Sub_expected_prev[4] !== 1'bx ) && ( Sub_prev[4] !== Sub_expected_prev[4] )
		&& ((Sub_expected_prev[4] !== last_Sub_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sub[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sub_expected_prev);
		$display ("     Real value = %b", Sub_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Sub_exp[4] = Sub_expected_prev[4];
	end
	if (
		( Sub_expected_prev[5] !== 1'bx ) && ( Sub_prev[5] !== Sub_expected_prev[5] )
		&& ((Sub_expected_prev[5] !== last_Sub_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sub[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sub_expected_prev);
		$display ("     Real value = %b", Sub_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Sub_exp[5] = Sub_expected_prev[5];
	end
	if (
		( Sub_expected_prev[6] !== 1'bx ) && ( Sub_prev[6] !== Sub_expected_prev[6] )
		&& ((Sub_expected_prev[6] !== last_Sub_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sub[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sub_expected_prev);
		$display ("     Real value = %b", Sub_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Sub_exp[6] = Sub_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Seven_bit_Swap_Subtractor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [6:0] A;
reg [6:0] B;
// wires                                               
wire overflow;
wire [6:0] Sub;

wire sampler;                             

// assign statements (if any)                          
Seven_bit_Swap_Subtractor i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.overflow(overflow),
	.Sub(Sub)
);
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
	A[6] = #140000 1'b1;
	A[6] = #70000 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
	A[5] = #210000 1'b1;
	A[5] = #70000 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
	A[4] = #140000 1'b1;
	A[4] = #140000 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
	A[3] = #70000 1'b1;
	A[3] = #140000 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
	A[2] = #140000 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
	A[1] = #70000 1'b1;
	A[1] = #70000 1'b0;
	A[1] = #70000 1'b1;
	A[1] = #70000 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
	A[0] = #140000 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
	B[6] = #70000 1'b1;
	B[6] = #210000 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
	B[5] = #70000 1'b1;
	B[5] = #70000 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
	B[4] = #70000 1'b1;
	B[4] = #210000 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
	B[3] = #140000 1'b1;
	B[3] = #140000 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
	B[2] = #70000 1'b0;
	B[2] = #70000 1'b1;
	B[2] = #70000 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
	B[1] = #210000 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
	B[0] = #70000 1'b0;
end 

Seven_bit_Swap_Subtractor_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.sampler_tx(sampler)
);

Seven_bit_Swap_Subtractor_vlg_check_tst tb_out(
	.overflow(overflow),
	.Sub(Sub),
	.sampler_rx(sampler)
);
endmodule

